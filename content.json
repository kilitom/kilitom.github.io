{"meta":{"title":"Kilitom","subtitle":"Kilitomの博客","description":"书中自有颜如玉,书中自有黄金屋","author":"Kilitom","url":"https://kilitom.github.io","root":"/"},"pages":[{"title":"about","date":"2018-09-30T09:25:30.000Z","updated":"2020-08-10T00:05:07.174Z","comments":true,"path":"about/index.html","permalink":"https://kilitom.github.io/about/index.html","excerpt":"","text":""},{"title":"404","date":"2018-09-30T09:25:30.000Z","updated":"2020-08-10T00:06:31.190Z","comments":true,"path":"404.html","permalink":"https://kilitom.github.io/404.html","excerpt":"","text":""},{"title":"categories","date":"2020-08-09T13:32:30.000Z","updated":"2020-08-10T00:05:22.586Z","comments":true,"path":"categories/index.html","permalink":"https://kilitom.github.io/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","updated":"2020-08-10T00:05:40.989Z","comments":true,"path":"contact/index.html","permalink":"https://kilitom.github.io/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","updated":"2020-08-10T00:05:55.522Z","comments":true,"path":"friends/index.html","permalink":"https://kilitom.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","updated":"2020-08-10T00:06:10.206Z","comments":true,"path":"tags/index.html","permalink":"https://kilitom.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java基础","slug":"Java基础","date":"2020-08-10T05:23:20.000Z","updated":"2020-08-10T05:50:19.769Z","comments":true,"path":"2020/08/10/java-ji-chu/","link":"","permalink":"https://kilitom.github.io/2020/08/10/java-ji-chu/","excerpt":"","text":"Java基础标识符Java中标识符的命名必须满足以下原则：标识符必须以字母、下划线（_）或美元符（$）开头，后面可以跟字母、数字、下划线或美元符 标识符可以包含数字，但不能以数字开头 除下划线“_”和“$”符号外，标识符中不包含任何特殊字符，如空格 标识符区分大小写，比如，“abc”和“Abc”是两个不同的标识符 对于标识符的长度没有限制 不能使用Java关键字作为标识符 例如 static public void main 分隔符Java中分隔符分为两类： 没有意义的空白符 拥有确定含义的普通分隔符 普通分隔符 名称 功能说明 {} 大括号 用来定义程序块，类，方法以及局部范围; [] 中括号 用来进行数组的声明，也可用来表示撤销对数组的引用; () 小括号 在定义和调用方法时用来容纳参数表，在控制语句或强制类型转换组成的表达式中用来表示执行或计算的优先级 ; ; 分号 用来表示一条语句的结束 ;在for控制语句中用来将圆括号内的语法连接起来; , 逗号 在变量声明中，用于分割变量表中的各个变量;在for控制语句中用来将圆括号内的语法连接起来; : 冒号 说明语句标号。例如在三元运算符中使用; 基本数据类型：（1）数值型： 1）整数类型（byte、short、int、long） 2)浮点类型（float、double） 注:long a=1234567890L(末尾加“L”、“l”),否则默认为int型； float b=2.3f(末尾加“F”、“f”),否则默认为double型； 八进制必须以0（零） 开头；十六必须进制以0X或0x开头（零X或零x）。 （2）字符型：char型 注：每个字符在unicode表中都有相对应的位置，如a在unicode表中的位置是97. 转义字符（是字符就要加单引号）：\\ddd:1-3为8进制数据所表示的字符，如\\123 \\uxxxx:4位16进制数据所表示的字符，如\\u0052 \\&#39;:单引号字符 \\\\:反斜杠字符 \\t:垂直制表符，将光标移到下一个制表符的位置 \\r:回车 \\n:换行 \\b:退格 \\f:换页 （3）布尔型（boolean）: 又称为逻辑类型，只有true和false两个值，表示真和假。 变量与常量1.常量：在程序执行过程中，其值不能被改变的量。 (1)常量的声明（定义常量）：1)final 数据类型 常量名称[=值];如final int a=5; 注:1）常量通常也被称为final变量 2）用final定义“成员变量（全局变量）”时，必须立刻设初值，否则会产生编译错误。 2.变量：在程序执行过程中，其值能被改变的量。(1)成员变量（全局变量）：定义在类中；成员变量又分为静态变量和实例变量； 1）静态变量（有static关键字）：有效范围跨类，甚至可达整个程序中（应用程序由若干个类构成）。 2）实例变量（无static关键字）：有效范围当前类。 (2)局部变量：定义在方法中。 注：当局部变量名与成员变量名相通时，成员变量将在此方法中暂时失效。 运算符(1)赋值运算符（=） 例：int a=3;(将3赋给a) int b=a+c;(将a+c的和赋给b) x=y=z=5;(将5的值赋给x、y、z，不建议使用) (2)算术运算符（+（加）、-（减）、*（乘）、/（除）、%（取余）） 例：12.45f*15=27.45; 45-30=15; 5*3=15; 6/2=3; 12%10=2; (3)自增、自减运算符（++、–）:操作员必须是一个整型或浮点型变量 例：假设a=5;以自增为例。 b=++a;//此时a先加1，再赋值给b,所以b=6; b=a++;//此时a直接赋给b,之后加1，所以b=5; (4)比较运算符（大于(&gt;)、小于(&lt;)、等于(==)、大于等于(&gt;=)、小于等于(&lt;=)、不等于(!=)） 例：4&gt;5,结果为false. 4!=5,结果为true. 注：结果为布尔值 (5)逻辑运算符（与(&amp;&amp;、&amp;)、或(||)、非(!)） 与：同真为真 或：一真为真 注：1）结果都为布尔值（flase、true） 2）短路运算符（&amp;&amp;）：第一个为假，就不再判断第二个。 非短路运算符（&amp;）：第一个为假，依然判断第二个，相比之下更浪费时间。 (6)三元运算符（条件式？值1：值2）：等价于if…..else语句 例：int y=a&gt;b?x+1:x-1; 含义：如果a&gt;b成立，y=x+1;否则y=x-1； 数据类型转换（1）隐式类型转换（自动类型转换） 例：int a=3; float x=a; 执行结果为3.0 （2）显式类型转换（强制类型转换）例：int a=(int)4.25; 执行结果为：4","categories":[{"name":"Java学习笔记","slug":"Java学习笔记","permalink":"https://kilitom.github.io/categories/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"-Java","slug":"Java","permalink":"https://kilitom.github.io/tags/Java/"}]},{"title":"Java入门","slug":"Java入门","date":"2020-08-09T11:23:20.000Z","updated":"2020-08-10T05:58:20.142Z","comments":true,"path":"2020/08/09/java-ru-men/","link":"","permalink":"https://kilitom.github.io/2020/08/09/java-ru-men/","excerpt":"","text":"了解JavaJava特点 1. ​简单性 2. ​面向对象性 3. ​分布式 4. ​健壮性 5. ​高性能 6. ​多线程 7. ​动态性 Java运行环境环境变量配置 - ​ JAVA_HOME ​ JAVA_HOME=JDK的安装路径(自己的安装路径C:\\Program Files\\Java\\jdk1.8.0_151) - ​ Path(系统在任何路径都可以识别 java, javac命令) ​ Path=%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin (系统自带的路径不要删掉) - ​ CLASSPATH ​ JAVA加载类路径，只有类在classpath中，java命令才能识别，在路径前加了个 &quot;.&quot;表示 ​ 当前路径 CLASSPATH=.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar JDK java 开发 工具包 /opt/jdk or /opt/jdk_1.6.01 - ​ |-- bin 开发工具(命令：java,javac,jar,javad,jar,rmic,jps...) - ​ |-- lib 开发工具的核心实现(tools.jar) - ​ |-- src.zip API的源文件 System.java - ​ |-- jre JRE Java运行环境 - ​ |-- lib (rt.jar) Java API(应用编程接口，系统类库) - ​ | (java 提供的现成组件) System.class String.class ... - ​ |-- bin (java_vm)JVM Java虚拟机 JDK、JRE、JVM之间的关系 - ​ JDK(Java Developer Kit) Java开发工具包 - ​ JRE(Java Runtime Environment)Java运行环境 - ​ JVM(Java Virtual Machine) Java虚拟机 三者关系： - ​ JDK=JRE+Java开发工具 - ​ JRE=JVM+Java类库 - ​ JDK包含JRE，JRE包含JVM Java运行原理 - ​Java文件类型 - ​.java Java源文件 - ​.class 二进制字节码文件 编译过程 1. ​首先，编写.java文件，通过javac命令将.java文件编译成.class文件（字节码文件）。编译过程只能简单的检查语错误； 2. ​其次，java命令去执行.class文件。 3. ​类加载器会进行代码装载，如果类需要跨网络，类加载器将执行安全检查； 4. ​字节码校验器将校验代码格式和对象类型转换，并检查是否发生越权访问； 5. ​即时编译器会将字节码转换成机器码，如果系统没有即时编译器，java解释器会处理并执行字节码类 一个Java程序的基本结构： package xxx; // package 包，此类的路径 import xxx.xxx.Xxxx; //引入其他类 //类名称：书写格式：首字母大写，若类名由多个单词组成每个单词的首字母大写 public class XxxXxx&amp;#123; /* main方法 */ public static void main(String []args) &amp;#123; // 方法体 &amp;#125; &amp;#125; Hello World​ 例子：HelloWorld.java public class HelloWorld&#123; /*第一个Java程序 *它将打印字符串Hello World */ public static void main(String []args)&#123; System.out.println(\"Hello World\");//打印Hello World &#125; &#125; 编译源文件：javac HelloWorld.java 执行class文件java HelloWorld 注释 1. 行注释 // 对某代码进行注释 2. 块注释 /*… …*/ 注释多行代码或用于说明文件、方法。数据结构等 3. 文档注释 /**… …*/用于生成HTML格式的代码报告。必须收发室在类、域、构造函数、方法，以及字段定义之间。","categories":[{"name":"Java学习笔记","slug":"Java学习笔记","permalink":"https://kilitom.github.io/categories/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"-Java","slug":"Java","permalink":"https://kilitom.github.io/tags/Java/"}]}],"categories":[{"name":"Java学习笔记","slug":"Java学习笔记","permalink":"https://kilitom.github.io/categories/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"-Java","slug":"Java","permalink":"https://kilitom.github.io/tags/Java/"}]}