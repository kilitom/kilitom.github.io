<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础</title>
      <link href="/2020/08/10/java-ji-chu/"/>
      <url>/2020/08/10/java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h3 id="Java中标识符的命名必须满足以下原则："><a href="#Java中标识符的命名必须满足以下原则：" class="headerlink" title="Java中标识符的命名必须满足以下原则："></a>Java中标识符的命名必须满足以下原则：</h3><pre><code>标识符必须以字母、下划线（_）或美元符（$）开头，后面可以跟字母、数字、下划线或美元符标识符可以包含数字，但不能以数字开头除下划线“_”和“$”符号外，标识符中不包含任何特殊字符，如空格标识符区分大小写，比如，“abc”和“Abc”是两个不同的标识符对于标识符的长度没有限制不能使用Java关键字作为标识符 例如 static public void  main</code></pre><h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><pre><code>Java中分隔符分为两类：没有意义的空白符 拥有确定含义的普通分隔符</code></pre><table><thead><tr><th align="left">普通分隔符</th><th align="left">名称</th><th align="left">功能说明</th></tr></thead><tbody><tr><td align="left">{}</td><td align="left">大括号</td><td align="left">用来定义程序块，类，方法以及局部范围;</td></tr><tr><td align="left">[]</td><td align="left">中括号</td><td align="left">用来进行数组的声明，也可用来表示撤销对数组的引用;</td></tr><tr><td align="left">()</td><td align="left">小括号</td><td align="left">在定义和调用方法时用来容纳参数表，在控制语句或强制类型转换组成的表达式中用来表示执行或计算的优先级 ;</td></tr><tr><td align="left">;</td><td align="left">分号</td><td align="left">用来表示一条语句的结束 ;在for控制语句中用来将圆括号内的语法连接起来;</td></tr><tr><td align="left">,</td><td align="left">逗号</td><td align="left">在变量声明中，用于分割变量表中的各个变量;在for控制语句中用来将圆括号内的语法连接起来;</td></tr><tr><td align="left">:</td><td align="left">冒号</td><td align="left">说明语句标号。例如在三元运算符中使用;</td></tr></tbody></table><h2 id="基本数据类型："><a href="#基本数据类型：" class="headerlink" title="基本数据类型："></a>基本数据类型：</h2><h4 id="（1）数值型："><a href="#（1）数值型：" class="headerlink" title="（1）数值型："></a>（1）数值型：</h4><pre><code>          1）整数类型（byte、short、int、long）         2)浮点类型（float、double）         注:long a=1234567890L(末尾加“L”、“l”),否则默认为int型；            float b=2.3f(末尾加“F”、“f”),否则默认为double型；            八进制必须以0（零） 开头；十六必须进制以0X或0x开头（零X或零x）。</code></pre><h4 id="（2）字符型：char型"><a href="#（2）字符型：char型" class="headerlink" title="（2）字符型：char型"></a>（2）字符型：char型</h4><pre><code>         注：每个字符在unicode表中都有相对应的位置，如a在unicode表中的位置是97.             转义字符（是字符就要加单引号）：\ddd:1-3为8进制数据所表示的字符，如\123                                          \uxxxx:4位16进制数据所表示的字符，如\u0052                                          \&#39;:单引号字符                                          \\:反斜杠字符                                          \t:垂直制表符，将光标移到下一个制表符的位置                                          \r:回车                                          \n:换行                                          \b:退格                                          \f:换页</code></pre><h4 id="（3）布尔型（boolean）"><a href="#（3）布尔型（boolean）" class="headerlink" title="（3）布尔型（boolean）:"></a>（3）布尔型（boolean）:</h4><pre><code> 又称为逻辑类型，只有true和false两个值，表示真和假。</code></pre><h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><h4 id="1-常量：在程序执行过程中，其值不能被改变的量。"><a href="#1-常量：在程序执行过程中，其值不能被改变的量。" class="headerlink" title="1.常量：在程序执行过程中，其值不能被改变的量。"></a>1.常量：在程序执行过程中，其值不能被改变的量。</h4><pre><code> (1)常量的声明（定义常量）：1)final 数据类型 常量名称[=值];如final int a=5;    注:1）常量通常也被称为final变量 2）用final定义“成员变量（全局变量）”时，必须立刻设初值，否则会产生编译错误。</code></pre><h4 id="2-变量：在程序执行过程中，其值能被改变的量。"><a href="#2-变量：在程序执行过程中，其值能被改变的量。" class="headerlink" title="2.变量：在程序执行过程中，其值能被改变的量。"></a>2.变量：在程序执行过程中，其值能被改变的量。</h4><pre><code>(1)成员变量（全局变量）：定义在类中；成员变量又分为静态变量和实例变量； 1）静态变量（有static关键字）：有效范围跨类，甚至可达整个程序中（应用程序由若干个类构成）。 2）实例变量（无static关键字）：有效范围当前类。(2)局部变量：定义在方法中。   注：当局部变量名与成员变量名相通时，成员变量将在此方法中暂时失效。</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h5 id="1-赋值运算符（-）"><a href="#1-赋值运算符（-）" class="headerlink" title="(1)赋值运算符（=）"></a>(1)赋值运算符（=）</h5><pre><code> 例：int a=3;(将3赋给a)     int b=a+c;(将a+c的和赋给b)     x=y=z=5;(将5的值赋给x、y、z，不建议使用)</code></pre><h5 id="2-算术运算符（-（加）、-（减）、-（乘）、-（除）、-（取余））"><a href="#2-算术运算符（-（加）、-（减）、-（乘）、-（除）、-（取余））" class="headerlink" title="(2)算术运算符（+（加）、-（减）、*（乘）、/（除）、%（取余））"></a>(2)算术运算符（+（加）、-（减）、*（乘）、/（除）、%（取余））</h5><pre><code> 例：12.45f*15=27.45;     45-30=15;     5*3=15;     6/2=3;     12%10=2;</code></pre><h5 id="3-自增、自减运算符（-、–）-操作员必须是一个整型或浮点型变量"><a href="#3-自增、自减运算符（-、–）-操作员必须是一个整型或浮点型变量" class="headerlink" title="(3)自增、自减运算符（++、–）:操作员必须是一个整型或浮点型变量"></a>(3)自增、自减运算符（++、–）:操作员必须是一个整型或浮点型变量</h5><pre><code> 例：假设a=5;以自增为例。     b=++a;//此时a先加1，再赋值给b,所以b=6;     b=a++;//此时a直接赋给b,之后加1，所以b=5;</code></pre><h5 id="4-比较运算符（大于-gt-、小于-lt-、等于-、大于等于-gt-、小于等于-lt-、不等于-）"><a href="#4-比较运算符（大于-gt-、小于-lt-、等于-、大于等于-gt-、小于等于-lt-、不等于-）" class="headerlink" title="(4)比较运算符（大于(&gt;)、小于(&lt;)、等于(==)、大于等于(&gt;=)、小于等于(&lt;=)、不等于(!=)）"></a>(4)比较运算符（大于(&gt;)、小于(&lt;)、等于(==)、大于等于(&gt;=)、小于等于(&lt;=)、不等于(!=)）</h5><pre><code> 例：4&gt;5,结果为false.     4!=5,结果为true. 注：结果为布尔值</code></pre><h5 id="5-逻辑运算符（与-amp-amp-、-amp-、或-、非-）"><a href="#5-逻辑运算符（与-amp-amp-、-amp-、或-、非-）" class="headerlink" title="(5)逻辑运算符（与(&amp;&amp;、&amp;)、或(||)、非(!)）"></a>(5)逻辑运算符（与(&amp;&amp;、&amp;)、或(||)、非(!)）</h5><pre><code> 与：同真为真 或：一真为真 注：1）结果都为布尔值（flase、true）     2）短路运算符（&amp;&amp;）：第一个为假，就不再判断第二个。        非短路运算符（&amp;）：第一个为假，依然判断第二个，相比之下更浪费时间。</code></pre><h5 id="6-三元运算符（条件式？值1：值2）：等价于if…-else语句"><a href="#6-三元运算符（条件式？值1：值2）：等价于if…-else语句" class="headerlink" title="(6)三元运算符（条件式？值1：值2）：等价于if…..else语句"></a>(6)三元运算符（条件式？值1：值2）：等价于if…..else语句</h5><pre><code> 例：int y=a&gt;b?x+1:x-1;    含义：如果a&gt;b成立，y=x+1;否则y=x-1；</code></pre><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h5 id="（1）隐式类型转换（自动类型转换）"><a href="#（1）隐式类型转换（自动类型转换）" class="headerlink" title="（1）隐式类型转换（自动类型转换）"></a>（1）隐式类型转换（自动类型转换）</h5><pre><code> 例：int a=3;     float x=a;     执行结果为3.0</code></pre><h5 id="（2）显式类型转换（强制类型转换）"><a href="#（2）显式类型转换（强制类型转换）" class="headerlink" title="（2）显式类型转换（强制类型转换）"></a>（2）显式类型转换（强制类型转换）</h5><pre><code>例：int a=(int)4.25;    执行结果为：4</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门</title>
      <link href="/2020/08/09/java-ru-men/"/>
      <url>/2020/08/09/java-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="了解Java"><a href="#了解Java" class="headerlink" title="了解Java"></a>了解Java</h1><h2 id="Java特点"><a href="#Java特点" class="headerlink" title="Java特点"></a>Java特点</h2><ol><li><pre><code>1. ​简单性2. ​面向对象性3. ​分布式4. ​健壮性5. ​高性能6. ​多线程7. ​动态性</code></pre></li></ol><h2 id="Java运行环境"><a href="#Java运行环境" class="headerlink" title="Java运行环境"></a>Java运行环境</h2><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><ul><li><pre><code>- ​    JAVA_HOME  ​        JAVA_HOME=JDK的安装路径(自己的安装路径C:\Program Files\Java\jdk1.8.0_151) - ​    Path(系统在任何路径都可以识别 java, javac命令)  ​        Path=%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin (系统自带的路径不要删掉)- ​    CLASSPATH  ​        JAVA加载类路径，只有类在classpath中，java命令才能识别，在路径前加了个  &quot;.&quot;表示  ​        当前路径  CLASSPATH=.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></pre></li></ul><h3 id="JDK-java-开发-工具包-opt-jdk-or-opt-jdk-1-6-01"><a href="#JDK-java-开发-工具包-opt-jdk-or-opt-jdk-1-6-01" class="headerlink" title="JDK java 开发 工具包 /opt/jdk or /opt/jdk_1.6.01"></a>JDK java 开发 工具包 /opt/jdk or /opt/jdk_1.6.01</h3><ul><li><pre><code>- ​    |-- bin 开发工具(命令：java,javac,jar,javad,jar,rmic,jps...)- ​    |-- lib 开发工具的核心实现(tools.jar)- ​    |-- src.zip API的源文件 System.java- ​    |-- jre JRE Java运行环境- ​    |-- lib (rt.jar) Java API(应用编程接口，系统类库)- ​    |  (java 提供的现成组件) System.class String.class ...- ​    |-- bin (java_vm)JVM Java虚拟机</code></pre></li></ul><h3 id="JDK、JRE、JVM之间的关系"><a href="#JDK、JRE、JVM之间的关系" class="headerlink" title="JDK、JRE、JVM之间的关系"></a>JDK、JRE、JVM之间的关系</h3><ul><li><pre><code>- ​    JDK(Java Developer     Kit) Java开发工具包- ​    JRE(Java Runtime     Environment)Java运行环境- ​    JVM(Java Virtual     Machine) Java虚拟机</code></pre></li></ul><h3 id="三者关系："><a href="#三者关系：" class="headerlink" title="三者关系："></a>三者关系：</h3><ul><li><pre><code>- ​    JDK=JRE+Java开发工具- ​    JRE=JVM+Java类库- ​    JDK包含JRE，JRE包含JVM</code></pre></li></ul><h2 id="Java运行原理"><a href="#Java运行原理" class="headerlink" title="Java运行原理"></a>Java运行原理</h2><ul><li><pre><code>- ​Java文件类型- ​.java  Java源文件- ​.class  二进制字节码文件</code></pre></li></ul><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><ol><li><pre><code>1. ​首先，编写.java文件，通过javac命令将.java文件编译成.class文件（字节码文件）。编译过程只能简单的检查语错误；2. ​其次，java命令去执行.class文件。3. ​类加载器会进行代码装载，如果类需要跨网络，类加载器将执行安全检查；4. ​字节码校验器将校验代码格式和对象类型转换，并检查是否发生越权访问；5. ​即时编译器会将字节码转换成机器码，如果系统没有即时编译器，java解释器会处理并执行字节码类</code></pre></li></ol><h4 id="一个Java程序的基本结构："><a href="#一个Java程序的基本结构：" class="headerlink" title="一个Java程序的基本结构："></a>一个Java程序的基本结构：</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">package</span>  xxx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// package 包，此类的路径</span>    <span class="token keyword">import</span>  xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>Xxxx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//引入其他类</span>    <span class="token comment" spellcheck="true">//类名称：书写格式：首字母大写，若类名由多个单词组成每个单词的首字母大写</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxXxx</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* main方法  */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方法体</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>​    例子：HelloWorld.java</p><pre class=" language-Java"><code class="language-Java">public class HelloWorld&#123;/*第一个Java程序*它将打印字符串Hello World*/    public static void main(String []args)&#123;        System.out.println("Hello World");//打印Hello World    &#125;&#125;</code></pre><h5 id="编译源文件："><a href="#编译源文件：" class="headerlink" title="编译源文件："></a>编译源文件：</h5><pre><code>javac HelloWorld.java </code></pre><h5 id="执行class文件"><a href="#执行class文件" class="headerlink" title="执行class文件"></a>执行class文件</h5><pre><code>java HelloWorld</code></pre><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><ol><li><pre><code>1. 行注释  // 对某代码进行注释2. 块注释  /*… …*/ 注释多行代码或用于说明文件、方法。数据结构等3. 文档注释  /**… …*/用于生成HTML格式的代码报告。必须收发室在类、域、构造函数、方法，以及字段定义之间。</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
